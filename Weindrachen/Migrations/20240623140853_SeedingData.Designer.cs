// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Weindrachen.Infrastructure.Data;

#nullable disable

namespace Weindrachen.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240623140853_SeedingData")]
    partial class SeedingData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Weindrachen.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("brand_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("origin_country");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("brand_name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("idb_brands_id");

                    b.ToTable("brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Argentina",
                            Name = "Catena Zapata"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Brazil",
                            Name = "Miolo"
                        },
                        new
                        {
                            Id = 3,
                            Country = "Chile",
                            Name = "Concha y Toro"
                        },
                        new
                        {
                            Id = 4,
                            Country = "France",
                            Name = "Château Margaux"
                        },
                        new
                        {
                            Id = 5,
                            Country = "Italy",
                            Name = "Antinori"
                        });
                });

            modelBuilder.Entity("Weindrachen.Models.Grape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("grape_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("grape_name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("idx_grapes_id");

                    b.ToTable("grapes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Malbec"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Merlot"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Carmenère"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Petit Verdot"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sangiovese"
                        });
                });

            modelBuilder.Entity("Weindrachen.Models.GrapeWine", b =>
                {
                    b.Property<int>("GrapeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("grape_id");

                    b.Property<int>("WineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("wine_id");

                    b.HasKey("GrapeId", "WineId");

                    b.HasIndex("GrapeId")
                        .HasDatabaseName("idx_grapes_wines_grape_id");

                    b.HasIndex("WineId")
                        .HasDatabaseName("idx_grapes_wines_wine_id");

                    b.ToTable("grapes_wines", (string)null);

                    b.HasData(
                        new
                        {
                            GrapeId = 1,
                            WineId = 1
                        },
                        new
                        {
                            GrapeId = 2,
                            WineId = 2
                        },
                        new
                        {
                            GrapeId = 3,
                            WineId = 3
                        },
                        new
                        {
                            GrapeId = 4,
                            WineId = 4
                        },
                        new
                        {
                            GrapeId = 5,
                            WineId = 5
                        });
                });

            modelBuilder.Entity("Weindrachen.Models.Wine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("wine_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AlcoholicLevel")
                        .HasColumnType("FLOAT")
                        .HasColumnName("alcoholic_level");

                    b.Property<int>("BrandId")
                        .HasColumnType("INT")
                        .HasColumnName("brand_id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("origin_country");

                    b.Property<sbyte>("IsDoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((sbyte)1)
                        .HasColumnName("is_doc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("wine_name");

                    b.Property<decimal>("Price")
                        .HasPrecision(7, 2)
                        .HasColumnType("DECIMAL")
                        .HasColumnName("price");

                    b.Property<string>("Taste")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("predominant_flavour");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("Id")
                        .HasDatabaseName("idx_wine_id");

                    b.ToTable("wines", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlcoholicLevel = 13.5f,
                            BrandId = 1,
                            Country = "Argentina",
                            IsDoc = (sbyte)0,
                            Name = "Catena Zapata Malbec",
                            Price = 30.00m,
                            Taste = "Cherry"
                        },
                        new
                        {
                            Id = 2,
                            AlcoholicLevel = 13.5f,
                            BrandId = 2,
                            Country = "Brazil",
                            IsDoc = (sbyte)0,
                            Name = "Miolo Merlot",
                            Price = 20.00m,
                            Taste = "Plum"
                        },
                        new
                        {
                            Id = 3,
                            AlcoholicLevel = 14f,
                            BrandId = 3,
                            Country = "Chile",
                            IsDoc = (sbyte)0,
                            Name = "Concha y Toro Carmenère",
                            Price = 25.00m,
                            Taste = "Blackberry"
                        },
                        new
                        {
                            Id = 4,
                            AlcoholicLevel = 13f,
                            BrandId = 4,
                            Country = "France",
                            IsDoc = (sbyte)1,
                            Name = "Château Margaux Petit Verdot",
                            Price = 100.00m,
                            Taste = "Chocolate"
                        },
                        new
                        {
                            Id = 5,
                            AlcoholicLevel = 13.5f,
                            BrandId = 5,
                            Country = "Italy",
                            IsDoc = (sbyte)1,
                            Name = "Antinori Sangiovese",
                            Price = 50.00m,
                            Taste = "StrawBerry"
                        });
                });

            modelBuilder.Entity("Weindrachen.Models.GrapeWine", b =>
                {
                    b.HasOne("Weindrachen.Models.Grape", "Grape")
                        .WithMany("GrapeWines")
                        .HasForeignKey("GrapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weindrachen.Models.Wine", "Wine")
                        .WithMany("GrapeWines")
                        .HasForeignKey("WineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grape");

                    b.Navigation("Wine");
                });

            modelBuilder.Entity("Weindrachen.Models.Wine", b =>
                {
                    b.HasOne("Weindrachen.Models.Brand", "Brand")
                        .WithMany("Wines")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Weindrachen.Models.Brand", b =>
                {
                    b.Navigation("Wines");
                });

            modelBuilder.Entity("Weindrachen.Models.Grape", b =>
                {
                    b.Navigation("GrapeWines");
                });

            modelBuilder.Entity("Weindrachen.Models.Wine", b =>
                {
                    b.Navigation("GrapeWines");
                });
#pragma warning restore 612, 618
        }
    }
}
